hello.message=Hola

#################################
## BEGIN: Data Base related properties

# Scenario 1: credentials hardcoded
#%prod.quarkus.datasource.jdbc.url = jdbc:postgresql://postgresql.grocery:5432/fruits_database
#%prod.quarkus.datasource.db-kind = postgresql
#%prod.quarkus.datasource.username = healthy
#%prod.quarkus.datasource.password = healthy

## Scenario 2: get credentials from secret. No SB extension
#%prod.quarkus.kubernetes.env.mapping.db-username.from-secret=fruits-database-secret
#%prod.quarkus.kubernetes.env.mapping.db-username.with-key=user
#%prod.quarkus.kubernetes.env.mapping.db-password.from-secret=fruits-database-secret
#%prod.quarkus.kubernetes.env.mapping.db-password.with-key=password
#
#%prod.quarkus.datasource.jdbc.url = jdbc:postgresql://postgresql.grocery:5432/fruits_database
#%prod.quarkus.datasource.username = ${DB_USERNAME}
#%prod.quarkus.datasource.password = ${DB_ttPASSWORD}

quarkus.datasource.db-kind=postgresql


## drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation = drop-and-create
quarkus.hibernate-orm.sql-load-script = import.sql
## show sql statements in log
quarkus.hibernate-orm.log.sql = true

## END: Data Base related properties
#################################

#Kubernetes configuration
quarkus.kubernetes-client.trust-certs=true
quarkus.kubernetes.ingress.expose=true
quarkus.kubernetes.ingress.host=atomic-fruits.127.0.0.1.nip.io

#Container image configuration
quarkus.container-image.registry=127.0.0.1:5000
quarkus.container-image.image=localhost:5000/amunozhe/atomic-fruits:1.0.0
quarkus.container-image.name=atomic-fruits
quarkus.container-image.group=amunozhe
quarkus.container-image.tag=1.0.0
quarkus.container-image.insecure=true
